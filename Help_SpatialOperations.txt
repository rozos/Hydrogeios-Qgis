# Install Mapwindow 4.8.8
# Install QGIS 2.4
# Install hydrogeios-qgis


# Define plugin path
pluginpath= str( QFileDialog.getExistingDirectory(None, "Plugin", "/", QFileDialog.ShowDirsOnly) )

# Define project path
projectpath= str( QFileDialog.getExistingDirectory(None, "Project", "/", QFileDialog.ShowDirsOnly) )

# Define taudem path
taudempath= "c:/Program Files (x86)/MapWindow/Taudem5Exe"

# Define raster files. These files should be of geotiff format and have 
# consistent projection.
demname= "DEM"
cnname= "CN"

# Define delineation threshold
threshold= 300

# Define CN grouping
cngroups=(44, 53, 100,)



# Import hydrogeios
import sys
sys.path.append(pluginpath)
import TauDEM
import h_const
import h_utils
import h_hru
import h_initLayers
import h_groundWater
import h_topology



# Initialize TauDEM
TauDEM.initialize(taudempath, projectpath, demname, debug=False)


# Initial delineation
TauDEM.autoDelineate(threshold)


# Define project projection (should be the same with DEM projection). Set Enable
#'on the fly' CRS transformation. Load created River shapefile and use it 
# (enable snapping to river before) to create the point layer Outlet (set it to 
# have the same projection with DEM layers). Start by digitizing any additional 
# control point, and end by digitizing the last layer point at the river exit.
h_utils.loadRasterfileToCanvas(projectpath, demname)


# Re-delineate with user defined outputs
h_utils.unloadShapefile(h_const.riverLayerName)
TauDEM.autoDelineate(threshold, outlet="Outlet")


# Convert raster layer of subbasin to an intermediate shapefile
h_utils.createVectorFromRaster(projectpath, demname+'w.tif', 1, "Subbas_u", "DN")


# Load intermediate layer to generalize and then delete nodata polygons
h_utils.generalize(projectpath, "Subbas_u", "Subbas", 100)
h_utils.loadShapefileToCanvas(projectpath, "Subbas")
dnvals=h_utils.getFieldAttrValues("Subbas", "DN")
nodataShapeId=h_utils.getElementIndexByVal(dnvals, h_const.nodataCode)
h_utils.delSpecificShapes("Subbas", nodataShapeId)


# Disolve Subbas layer to merge small polygons into mother polys
h_utils.dissolve(projectpath, 'Subbas', h_const.subbasLayerName)


h_utils.unloadShapefile("Subbas")
h_utils.unloadShapefile("Outlet")


# Delete from the attribute table of layer River the field Length
h_utils.loadShapefileToCanvas(projectpath, h_const.riverLayerName)
h_utils.delField(h_const.riverLayerName, "Length")


# Initialize template layers
h_initLayers.doAll(projectpath)



# Create HRU
h_utils.loadRasterfileToCanvas(projectpath, cnname)
h_hru.createHRU(projectpath, cnname, 1, cngroups)

# Create Subbasin-HRU shapefile
h_utils.loadShapefileToCanvas(projectpath, h_const.HRULayerName)
h_hru.createSubbasinHRU(projectpath)



# Digitizie GroundWater polygons. Make sure you snap to GroundWater verteces!
# Digitize boreholes (define group IDs)
# Digitize springs


# Process groundwater cells
h_utils.loadShapefileToCanvas(projectpath, h_const.riverexitnodeLayerName)
h_groundWater.doAll(projectpath)


# Digitize irrigation areas


# Create hydrojunctions
h_utils.loadRasterfileToCanvas(projectpath, demname)
h_const.DEMlayerName=demname
h_topology.createHydrojunctionLayer(projectpath)


# Add aqueduct nodes (set junction type to 1) in Hydrojunction
# Digitize Aqueduct. Make sure it snaps to Hydrojuntions!


# Build topology
h_utils.addMeasureToAttrTable(h_const.aquedLayerName, h_const.aquedFieldLength)
h_topology.build()
